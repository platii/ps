
자주하는 실수.

1. if(base condition)에서, 마지막에 return을 적지 않음. -> 재귀 오류냠.

2. for문에서(recursive condition)
    arr[cur]=num[i]; 라고 하여야 하는데, cur자리에 i를 넣는 실수 ->굉장히 빈번함.

3. for문에서
    func(cur+1)로 보내야 하는데 func(0)으로 작성하는 실수

4. 배열로 주어지는 경우 정렬해야하는경우가 많은데 정렬하지 않는 실수.

5. if(베이스 컨디션)에서 for문, if문 괄호 실수, cout<<'\n'(줄바꿈)문장 for문 내에 넣거나 들여쓰기 안한 경우.

6. for문에서 if를 감쌀 것인지, continue할 것인지 잘 보고 체크.



기타 고려해야하는 것, 팁 정리

1. for(int i=st, i<n; i++)
    ~~~~~~~~~~~~~~~~
    func(cur+1, i+1) 꼴로, st를 활용하면 (오름차순, 중복 없음) 조건에서 굉장히 효율적인 코드 작성 가능.
                      여기서 st로 보내면, func호출한 후 자기자신 비교, st+1은 자기 자신의 다음 인자를 비교.
                      -->자주하는 실수 -> i혹은 i+1로 보내야하는데 st, st+1로 보내는 실수.

2. 지역변수, 전역변수, 매개변수 인자.   
    전역변수는 선언시 0으로 자동 초기화
    지역변수는 쓰레기 값으로 채워짐->무조건 0이나, {}로 초기화 해주어야함.
    매개변수는 func호출시 값이 그대로 전달됨.(st의 활용처럼)func호출 시에 그 func에 대하여 영향을 주어야 하는 값에 용이함.

    전역변수로 선언하는 경우 : func호출시에도 그 아래의 함수로도 변수가 유지되고 변경되기 원하는 경우. 
                              ex)계란으로 계란치기 문제에서 brk(꺠진 계란수 체크)
                              ->단. 이경우, 무조건, func 호출 종료후, 전역변수의 값을 갈림길에서의 값으로 돌려주어야함.

    지역변수로 선언하는 경우 :  func호출 시 그 아래의 함수로는 변수가 영향을 미치거나, 아래의 함수에 의해 변경되지 않았으면 하는 경우.
                              ex) n과m(12)문제. pre를 지역변수로 선언하여 그 func내에서(보통 for문 내에서)만 pre가 변경.적용됨.

    매개변수에 사용되는 경우 : func호출 시의 st값이 전달되기 원하는 경우
                            ex)오름차순, 비내림차순등의 문제에서 st의 사용