//연습문제 3.
#include <iostream>
using namespace std;

int s[301]; // stair 보관.
int d[301][3];

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin>>n;
    for(int i=1; i<=n; i++) cin>>s[i];
    d[1][1]=s[1]; // 초기값 대입
    d[1][2]=0;
    d[2][1]=s[2];
    d[2][2]=s[1]+s[2]; //코드 간결성을 위해 넣어줌.
    for(int i=3; i<=n; i++){
        d[i][1]=max(d[i-2][1], d[i-2][2])+s[i];
        d[i][2]=d[i-1][1]+s[i];
    }
    cout<<max(d[n][1], d[n][2]);
}

/* n이 충분히 작다면 2^n의 시간복잡도로 백트래킹으로 풀 수있음.
하지만 지금처럼 n이 300으로 주어진 경우 불가능.

1. 테이블 구성
d[i]=i지점에서의 점수의 최댓값

-> 이런식으로 구성해보려 했으나 이렇게 하게되면, 연속으로 올라간 계단의 수의 정보를 넣을 방법이 없음.

## => 교안에 있는대로 변경.
1. 테이블 구성
d[i][j]=j번 연속해서 계단을 올라와서, i번째 계단을 밟을때 점수 값의 합의 최댓값, 단, i번째 계단을 반드시 밟아야함.

2. 점화식 설정.
d[i][1]=max(d[i-2][1], d[i-2][2])+s[i];
d[i][2]=d[i-1][1]+s[i];

3. 초기값 대입.
d[1][1]=s[1], d[1][2]=0;
d[2][1]=s[2], d[2][2]=s[1]+s[2]; //d[2][2]를 굳이 초기 입력해줄 필욘 없지만 코드가 간결해지므로 작성.

*/